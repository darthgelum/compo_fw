{"version":3,"names":[],"mappings":"","sources":["secure-dfu.js"],"sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.SecureDfu = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n/*\n* Web Bluetooth DFU\n* Copyright (c) 2018 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst events_1 = require(\"events\");\n/**\n * @hidden\n */\nclass EventDispatcher extends events_1.EventEmitter {\n    // tslint:disable-next-line:array-type\n    addEventListener(event, listener) {\n        return super.addListener(event, listener);\n    }\n    // tslint:disable-next-line:array-type\n    removeEventListener(event, listener) {\n        return super.removeListener(event, listener);\n    }\n    dispatchEvent(eventType, event) {\n        return super.emit(eventType, event);\n    }\n}\nexports.EventDispatcher = EventDispatcher;\n\n\n\n},{\"events\":4}],2:[function(require,module,exports){\n\"use strict\";\n/*\n* Web Bluetooth DFU\n* Copyright (c) 2018 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst dispatcher_1 = require(\"./dispatcher\");\nconst CONTROL_UUID = \"8ec90001-f315-4f60-9fb8-838830daea50\";\nconst PACKET_UUID = \"8ec90002-f315-4f60-9fb8-838830daea50\";\nconst BUTTON_UUID = \"8ec90003-f315-4f60-9fb8-838830daea50\";\nconst LITTLE_ENDIAN = true;\nconst PACKET_SIZE = 20;\nconst OPERATIONS = {\n    BUTTON_COMMAND: [0x01],\n    CREATE_COMMAND: [0x01, 0x01],\n    CREATE_DATA: [0x01, 0x02],\n    RECEIPT_NOTIFICATIONS: [0x02],\n    CACULATE_CHECKSUM: [0x03],\n    EXECUTE: [0x04],\n    SELECT_COMMAND: [0x06, 0x01],\n    SELECT_DATA: [0x06, 0x02],\n    RESPONSE: [0x60, 0x20]\n};\nconst RESPONSE = {\n    // Invalid code\n    0x00: \"Invalid opcode\",\n    // Success\n    0x01: \"Operation successful\",\n    // Opcode not supported\n    0x02: \"Opcode not supported\",\n    // Invalid parameter\n    0x03: \"Missing or invalid parameter value\",\n    // Insufficient resources\n    0x04: \"Not enough memory for the data object\",\n    // Invalid object\n    0x05: \"Data object does not match the firmware and hardware requirements, the signature is wrong, or parsing the command failed\",\n    // Unsupported type\n    0x07: \"Not a valid object type for a Create request\",\n    // Operation not permitted\n    0x08: \"The state of the DFU process does not allow this operation\",\n    // Operation failed\n    0x0A: \"Operation failed\",\n    // Extended error\n    0x0B: \"Extended error\"\n};\nconst EXTENDED_ERROR = {\n    // No error\n    0x00: \"No extended error code has been set. This error indicates an implementation problem\",\n    // Invalid error code\n    0x01: \"Invalid error code. This error code should never be used outside of development\",\n    // Wrong command format\n    0x02: \"The format of the command was incorrect\",\n    // Unknown command\n    0x03: \"The command was successfully parsed, but it is not supported or unknown\",\n    // Init command invalid\n    0x04: \"The init command is invalid. The init packet either has an invalid update type or it is missing required fields for the update type\",\n    // Firmware version failure\n    0x05: \"The firmware version is too low. For an application, the version must be greater than the current application. For a bootloader, it must be greater than or equal to the current version\",\n    // Hardware version failure\n    0x06: \"The hardware version of the device does not match the required hardware version for the update\",\n    // Softdevice version failure\n    0x07: \"The array of supported SoftDevices for the update does not contain the FWID of the current SoftDevice\",\n    // Signature missing\n    0x08: \"The init packet does not contain a signature\",\n    // Wrong hash type\n    0x09: \"The hash type that is specified by the init packet is not supported by the DFU bootloader\",\n    // Hash failed\n    0x0A: \"The hash of the firmware image cannot be calculated\",\n    // Wrong signature type\n    0x0B: \"The type of the signature is unknown or not supported by the DFU bootloader\",\n    // Verification failed\n    0x0C: \"The hash of the received firmware image does not match the hash in the init packet\",\n    // Insufficient space\n    0x0D: \"The available space on the device is insufficient to hold the firmware\"\n};\n/**\n * Secure Device Firmware Update class\n */\nclass SecureDfu extends dispatcher_1.EventDispatcher {\n    /**\n     * Characteristic constructor\n     * @param bluetooth A bluetooth instance\n     * @param crc32 A CRC32 function\n     * @param delay Milliseconds of delay between packets\n     */\n    constructor(crc32, bluetooth, delay = 0) {\n        super();\n        this.crc32 = crc32;\n        this.bluetooth = bluetooth;\n        this.delay = delay;\n        this.DEFAULT_UUIDS = {\n            service: SecureDfu.SERVICE_UUID,\n            button: BUTTON_UUID,\n            control: CONTROL_UUID,\n            packet: PACKET_UUID\n        };\n        this.notifyFns = {};\n        this.controlChar = null;\n        this.packetChar = null;\n        if (!this.bluetooth && window && window.navigator && window.navigator.bluetooth) {\n            this.bluetooth = navigator.bluetooth;\n        }\n    }\n    log(message) {\n        this.dispatchEvent(SecureDfu.EVENT_LOG, {\n            message: message\n        });\n    }\n    progress(bytes) {\n        this.dispatchEvent(SecureDfu.EVENT_PROGRESS, {\n            object: \"unknown\",\n            totalBytes: 0,\n            currentBytes: bytes\n        });\n    }\n    connect(device) {\n        device.addEventListener(\"gattserverdisconnected\", () => {\n            this.notifyFns = {};\n            this.controlChar = null;\n            this.packetChar = null;\n        });\n        return this.gattConnect(device)\n            .then(characteristics => {\n            this.log(`found ${characteristics.length} characteristic(s)`);\n            this.packetChar = characteristics.find(characteristic => {\n                return (characteristic.uuid === PACKET_UUID);\n            });\n            if (!this.packetChar)\n                throw new Error(\"Unable to find packet characteristic\");\n            this.log(\"found packet characteristic\");\n            this.controlChar = characteristics.find(characteristic => {\n                return (characteristic.uuid === CONTROL_UUID);\n            });\n            if (!this.controlChar)\n                throw new Error(\"Unable to find control characteristic\");\n            this.log(\"found control characteristic\");\n            if (!this.controlChar.properties.notify && !this.controlChar.properties.indicate) {\n                throw new Error(\"Control characteristic does not allow notifications\");\n            }\n            return this.controlChar.startNotifications();\n        })\n            .then(() => {\n            this.controlChar.addEventListener(\"characteristicvaluechanged\", this.handleNotification.bind(this));\n            this.log(\"enabled control notifications\");\n            return device;\n        });\n    }\n    gattConnect(device, serviceUUID = SecureDfu.SERVICE_UUID) {\n        return Promise.resolve()\n            .then(() => {\n            if (device.gatt.connected)\n                return device.gatt;\n            return device.gatt.connect();\n        })\n            .then(server => {\n            this.log(\"connected to gatt server\");\n            return server.getPrimaryService(serviceUUID)\n                .catch(() => {\n                throw new Error(\"Unable to find DFU service\");\n            });\n        })\n            .then(service => {\n            this.log(\"found DFU service\");\n            return service.getCharacteristics();\n        });\n    }\n    handleNotification(event) {\n        const view = event.target.value;\n        if (OPERATIONS.RESPONSE.indexOf(view.getUint8(0)) < 0) {\n            throw new Error(\"Unrecognised control characteristic response notification\");\n        }\n        const operation = view.getUint8(1);\n        if (this.notifyFns[operation]) {\n            const result = view.getUint8(2);\n            let error = null;\n            if (result === 0x01) {\n                const data = new DataView(view.buffer, 3);\n                this.notifyFns[operation].resolve(data);\n            }\n            else if (result === 0x0B) {\n                const code = view.getUint8(3);\n                error = `Error: ${EXTENDED_ERROR[code]}`;\n            }\n            else {\n                error = `Error: ${RESPONSE[result]}`;\n            }\n            if (error) {\n                this.log(`notify: ${error}`);\n                this.notifyFns[operation].reject(error);\n            }\n            delete this.notifyFns[operation];\n        }\n    }\n    sendOperation(characteristic, operation, buffer) {\n        return new Promise((resolve, reject) => {\n            let size = operation.length;\n            if (buffer)\n                size += buffer.byteLength;\n            const value = new Uint8Array(size);\n            value.set(operation);\n            if (buffer) {\n                const data = new Uint8Array(buffer);\n                value.set(data, operation.length);\n            }\n            this.notifyFns[operation[0]] = {\n                resolve: resolve,\n                reject: reject\n            };\n            characteristic.writeValue(value)\n                .catch(e => {\n                this.log(e);\n                return Promise.resolve()\n                    .then(() => this.delayPromise(500))\n                    // Retry once\n                    .then(() => characteristic.writeValue(value));\n            });\n        });\n    }\n    sendControl(operation, buffer) {\n        return new Promise(resolve => {\n            this.sendOperation(this.controlChar, operation, buffer)\n                .then(resp => {\n                setTimeout(() => resolve(resp), this.delay);\n            });\n        });\n    }\n    transferInit(buffer) {\n        return this.transfer(buffer, \"init\", OPERATIONS.SELECT_COMMAND, OPERATIONS.CREATE_COMMAND);\n    }\n    transferFirmware(buffer) {\n        return this.transfer(buffer, \"firmware\", OPERATIONS.SELECT_DATA, OPERATIONS.CREATE_DATA);\n    }\n    transfer(buffer, type, selectType, createType) {\n        return this.sendControl(selectType)\n            .then(response => {\n            const maxSize = response.getUint32(0, LITTLE_ENDIAN);\n            const offset = response.getUint32(4, LITTLE_ENDIAN);\n            const crc = response.getInt32(8, LITTLE_ENDIAN);\n            if (type === \"init\" && offset === buffer.byteLength && this.checkCrc(buffer, crc)) {\n                this.log(\"init packet already available, skipping transfer\");\n                return;\n            }\n            this.progress = bytes => {\n                this.dispatchEvent(SecureDfu.EVENT_PROGRESS, {\n                    object: type,\n                    totalBytes: buffer.byteLength,\n                    currentBytes: bytes\n                });\n            };\n            this.progress(0);\n            return this.transferObject(buffer, createType, maxSize, offset);\n        });\n    }\n    transferObject(buffer, createType, maxSize, offset) {\n        const start = offset - offset % maxSize;\n        const end = Math.min(start + maxSize, buffer.byteLength);\n        const view = new DataView(new ArrayBuffer(4));\n        view.setUint32(0, end - start, LITTLE_ENDIAN);\n        return this.sendControl(createType, view.buffer)\n            .then(() => {\n            const data = buffer.slice(start, end);\n            return this.transferData(data, start);\n        })\n            .then(() => {\n            return this.sendControl(OPERATIONS.CACULATE_CHECKSUM);\n        })\n            .then(response => {\n            const crc = response.getInt32(4, LITTLE_ENDIAN);\n            const transferred = response.getUint32(0, LITTLE_ENDIAN);\n            const data = buffer.slice(0, transferred);\n            if (this.checkCrc(data, crc)) {\n                this.log(`written ${transferred} bytes`);\n                offset = transferred;\n                return this.sendControl(OPERATIONS.EXECUTE);\n            }\n            else {\n                this.log(\"object failed to validate\");\n            }\n        })\n            .then(() => {\n            if (end < buffer.byteLength) {\n                return this.transferObject(buffer, createType, maxSize, offset);\n            }\n            else {\n                this.log(\"transfer complete\");\n            }\n        });\n    }\n    transferData(data, offset, start) {\n        start = start || 0;\n        const end = Math.min(start + PACKET_SIZE, data.byteLength);\n        const packet = data.slice(start, end);\n        return this.packetChar.writeValue(packet)\n            .then(() => this.delayPromise(this.delay))\n            .then(() => {\n            this.progress(offset + end);\n            if (end < data.byteLength) {\n                return this.transferData(data, offset, end);\n            }\n        });\n    }\n    checkCrc(buffer, crc) {\n        if (!this.crc32) {\n            this.log(\"crc32 not found, skipping CRC check\");\n            return true;\n        }\n        return crc === this.crc32(new Uint8Array(buffer));\n    }\n    delayPromise(delay) {\n        return new Promise(resolve => {\n            setTimeout(resolve, delay);\n        });\n    }\n    /**\n     * Scans for a device to update\n     * @param buttonLess Scans for all devices and will automatically call `setDfuMode`\n     * @param filters Alternative filters to use when scanning\n     * @param uuids Optional alternative uuids for service, control, packet or button\n     * @returns Promise containing the device\n     */\n    requestDevice(buttonLess, filters, uuids = this.DEFAULT_UUIDS) {\n        uuids = {\n            ...this.DEFAULT_UUIDS,\n            ...uuids\n        };\n        if (!buttonLess && !filters) {\n            filters = [{ services: [uuids.service] }];\n        }\n        const options = {\n            optionalServices: [uuids.service]\n        };\n        if (filters)\n            options.filters = filters;\n        else\n            options.acceptAllDevices = true;\n        return this.bluetooth.requestDevice(options)\n            .then(device => {\n            if (buttonLess) {\n                return this.setDfuMode(device, uuids);\n            }\n            return device;\n        });\n    }\n    /**\n     * Sets the DFU mode of a device, preparing it for update\n     * @param device The device to switch mode\n     * @param uuids Optional alternative uuids for control, packet or button\n     * @returns Promise containing the device if it is still on a valid state\n     */\n    setDfuMode(device, uuids = this.DEFAULT_UUIDS) {\n        uuids = {\n            ...this.DEFAULT_UUIDS,\n            ...uuids\n        };\n        return this.gattConnect(device, uuids.service)\n            .then(characteristics => {\n            this.log(`found ${characteristics.length} characteristic(s)`);\n            const controlChar = characteristics.find(characteristic => {\n                return (characteristic.uuid === uuids.control);\n            });\n            const packetChar = characteristics.find(characteristic => {\n                return (characteristic.uuid === uuids.packet);\n            });\n            if (controlChar && packetChar) {\n                return device;\n            }\n            const buttonChar = characteristics.find(characteristic => {\n                return (characteristic.uuid === uuids.button);\n            });\n            if (!buttonChar) {\n                throw new Error(\"Unsupported device\");\n            }\n            // Support buttonless devices\n            this.log(\"found buttonless characteristic\");\n            if (!buttonChar.properties.notify && !buttonChar.properties.indicate) {\n                throw new Error(\"Buttonless characteristic does not allow notifications\");\n            }\n            return new Promise((resolve, _reject) => {\n                function complete() {\n                    this.notifyFns = {};\n                    // Resolve with null device as it needs reconnecting\n                    resolve(null);\n                }\n                buttonChar.startNotifications()\n                    .then(() => {\n                    this.log(\"enabled buttonless notifications\");\n                    device.addEventListener(\"gattserverdisconnected\", complete.bind(this));\n                    buttonChar.addEventListener(\"characteristicvaluechanged\", this.handleNotification.bind(this));\n                    return this.sendOperation(buttonChar, OPERATIONS.BUTTON_COMMAND);\n                })\n                    .then(() => {\n                    this.log(\"sent DFU mode\");\n                    complete();\n                });\n            });\n        });\n    }\n    /**\n     * Updates a device\n     * @param device The device to switch mode\n     * @param init The initialisation packet to send\n     * @param firmware The firmware to update\n     * @returns Promise containing the device\n     */\n    update(device, init, firmware) {\n        return new Promise((resolve, reject) => {\n            if (!device)\n                return reject(\"Device not specified\");\n            if (!init)\n                return reject(\"Init not specified\");\n            if (!firmware)\n                return reject(\"Firmware not specified\");\n            this.connect(device)\n                .then(() => {\n                this.log(\"transferring init\");\n                return this.transferInit(init);\n            })\n                .then(() => {\n                this.log(\"transferring firmware\");\n                return this.transferFirmware(firmware);\n            })\n                .then(() => {\n                this.log(\"complete, disconnecting...\");\n                device.addEventListener(\"gattserverdisconnected\", () => {\n                    this.log(\"disconnected\");\n                    resolve(device);\n                });\n            })\n                .catch(error => reject(error));\n        });\n    }\n}\nexports.SecureDfu = SecureDfu;\n/**\n * DFU Service unique identifier\n */\nSecureDfu.SERVICE_UUID = 0xFE59;\n/**\n * Log event\n * @event\n */\nSecureDfu.EVENT_LOG = \"log\";\n/**\n * Progress event\n * @event\n */\nSecureDfu.EVENT_PROGRESS = \"progress\";\n\n\n\n},{\"./dispatcher\":1}],3:[function(require,module,exports){\n\"use strict\";\n/*\n* Web Bluetooth DFU\n* Copyright (c) 2018 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\nconst secure_dfu_1 = require(\"./secure-dfu\");\nmodule.exports = secure_dfu_1.SecureDfu;\n\n\n\n},{\"./secure-dfu\":2}],4:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar objectCreate = Object.create || objectCreatePolyfill\nvar objectKeys = Object.keys || objectKeysPolyfill\nvar bind = Function.prototype.bind || functionBindPolyfill\n\nfunction EventEmitter() {\n  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {\n    this._events = objectCreate(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nvar hasDefineProperty;\ntry {\n  var o = {};\n  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });\n  hasDefineProperty = o.x === 0;\n} catch (err) { hasDefineProperty = false }\nif (hasDefineProperty) {\n  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {\n    enumerable: true,\n    get: function() {\n      return defaultMaxListeners;\n    },\n    set: function(arg) {\n      // check whether the input is a positive number (whose value is zero or\n      // greater and not a NaN).\n      if (typeof arg !== 'number' || arg < 0 || arg !== arg)\n        throw new TypeError('\"defaultMaxListeners\" must be a positive number');\n      defaultMaxListeners = arg;\n    }\n  });\n} else {\n  EventEmitter.defaultMaxListeners = defaultMaxListeners;\n}\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n))\n    throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn)\n    handler.call(self);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn)\n    handler.call(self, arg1);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn)\n    handler.call(self, arg1, arg2);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn)\n    handler.call(self, arg1, arg2, arg3);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events;\n  var doError = (type === 'error');\n\n  events = this._events;\n  if (events)\n    doError = (doError && events.error == null);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    if (arguments.length > 1)\n      er = arguments[1];\n    if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Unhandled \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n\n  handler = events[type];\n\n  if (!handler)\n    return false;\n\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n      // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n      // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++)\n        args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n\n  events = target._events;\n  if (!events) {\n    events = target._events = objectCreate(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type,\n          listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n          prepend ? [listener, existing] : [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' +\n            existing.length + ' \"' + String(type) + '\" listeners ' +\n            'added. Use emitter.setMaxListeners() to ' +\n            'increase limit.');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        if (typeof console === 'object' && console.warn) {\n          console.warn('%s: %s', w.name, w.message);\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    switch (arguments.length) {\n      case 0:\n        return this.listener.call(this.target);\n      case 1:\n        return this.listener.call(this.target, arguments[0]);\n      case 2:\n        return this.listener.call(this.target, arguments[0], arguments[1]);\n      case 3:\n        return this.listener.call(this.target, arguments[0], arguments[1],\n            arguments[2]);\n      default:\n        var args = new Array(arguments.length);\n        for (var i = 0; i < args.length; ++i)\n          args[i] = arguments[i];\n        this.listener.apply(this.target, args);\n    }\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = bind.call(onceWrapper, state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      list = events[type];\n      if (!list)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = objectCreate(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else\n          spliceOne(list, position);\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (!events.removeListener) {\n        if (arguments.length === 0) {\n          this._events = objectCreate(null);\n          this._eventsCount = 0;\n        } else if (events[type]) {\n          if (--this._eventsCount === 0)\n            this._events = objectCreate(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = objectKeys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = objectCreate(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (!events)\n    return [];\n\n  var evlistener = events[type];\n  if (!evlistener)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction objectCreatePolyfill(proto) {\n  var F = function() {};\n  F.prototype = proto;\n  return new F;\n}\nfunction objectKeysPolyfill(obj) {\n  var keys = [];\n  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {\n    keys.push(k);\n  }\n  return k;\n}\nfunction functionBindPolyfill(context) {\n  var fn = this;\n  return function () {\n    return fn.apply(context, arguments);\n  };\n}\n\n},{}]},{},[3])(3)\n});\n"],"file":"secure-dfu.js","sourceRoot":"../lib"}